// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace PaderbornUniversity.SILab.Hip.FeatureToggle.Clients
{
    using System.Threading.Tasks;
    using Models;

    /// <summary>
    /// Extension methods for HiPCMSAPI.
    /// </summary>
    public static partial class HiPCMSAPIExtensions
    {
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<Layer> ApiAnnotationLayersGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationLayersGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Layer>> ApiAnnotationLayersGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationLayersGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<LayerRelationRule> ApiAnnotationLayersRelationRulesGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationLayersRelationRulesGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<LayerRelationRule>> ApiAnnotationLayersRelationRulesGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationLayersRelationRulesGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='original'>
        /// </param>
        /// <param name='changed'>
        /// </param>
        public static void ApiAnnotationLayersRelationRulePut(this IHiPCMSAPI operations, string authorization, RelationFormModel original = default(RelationFormModel), RelationFormModel changed = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationLayersRelationRulePutAsync(authorization, original, changed), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='original'>
        /// </param>
        /// <param name='changed'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationLayersRelationRulePutAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel original = default(RelationFormModel), RelationFormModel changed = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationLayersRelationRulePutWithHttpMessagesAsync(authorization, original, changed, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiAnnotationLayersRelationRulePost(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationLayersRelationRulePostAsync(authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationLayersRelationRulePostAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationLayersRelationRulePostWithHttpMessagesAsync(authorization, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='sourceId'>
        /// </param>
        /// <param name='targetId'>
        /// </param>
        public static void ApiAnnotationLayersRelationRuleDelete(this IHiPCMSAPI operations, string authorization, int? sourceId = default(int?), int? targetId = default(int?))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationLayersRelationRuleDeleteAsync(authorization, sourceId, targetId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='sourceId'>
        /// </param>
        /// <param name='targetId'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationLayersRelationRuleDeleteAsync(this IHiPCMSAPI operations, string authorization, int? sourceId = default(int?), int? targetId = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationLayersRelationRuleDeleteWithHttpMessagesAsync(authorization, sourceId, targetId, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='includeDeleted'>
        /// </param>
        /// <param name='includeOnlyRoot'>
        /// </param>
        public static System.Collections.Generic.IList<TagResult> ApiAnnotationTagsGet(this IHiPCMSAPI operations, string authorization, bool? includeDeleted = default(bool?), bool? includeOnlyRoot = default(bool?))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsGetAsync(authorization, includeDeleted, includeOnlyRoot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='includeDeleted'>
        /// </param>
        /// <param name='includeOnlyRoot'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<TagResult>> ApiAnnotationTagsGetAsync(this IHiPCMSAPI operations, string authorization, bool? includeDeleted = default(bool?), bool? includeOnlyRoot = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsGetWithHttpMessagesAsync(authorization, includeDeleted, includeOnlyRoot, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='tag'>
        /// </param>
        public static EntityResult ApiAnnotationTagsPost(this IHiPCMSAPI operations, string authorization, TagFormModel tag = default(TagFormModel))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsPostAsync(authorization, tag), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='tag'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EntityResult> ApiAnnotationTagsPostAsync(this IHiPCMSAPI operations, string authorization, TagFormModel tag = default(TagFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsPostWithHttpMessagesAsync(authorization, tag, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static TagResult ApiAnnotationTagsByIdGet(this IHiPCMSAPI operations, int id, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByIdGetAsync(id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagResult> ApiAnnotationTagsByIdGetAsync(this IHiPCMSAPI operations, int id, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsByIdGetWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiAnnotationTagsByIdPut(this IHiPCMSAPI operations, int id, string authorization, TagFormModel model = default(TagFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByIdPutAsync(id, authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsByIdPutAsync(this IHiPCMSAPI operations, int id, string authorization, TagFormModel model = default(TagFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsByIdPutWithHttpMessagesAsync(id, authorization, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiAnnotationTagsByIdDelete(this IHiPCMSAPI operations, int id, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByIdDeleteAsync(id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsByIdDeleteAsync(this IHiPCMSAPI operations, int id, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsByIdDeleteWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<TagResult> ApiAnnotationTagsByIdChildTagsGet(this IHiPCMSAPI operations, int id, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByIdChildTagsGetAsync(id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<TagResult>> ApiAnnotationTagsByIdChildTagsGetAsync(this IHiPCMSAPI operations, int id, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsByIdChildTagsGetWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiAnnotationTagsByParentIdChildTagsByChildIdPost(this IHiPCMSAPI operations, int parentId, int childId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByParentIdChildTagsByChildIdPostAsync(parentId, childId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsByParentIdChildTagsByChildIdPostAsync(this IHiPCMSAPI operations, int parentId, int childId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsByParentIdChildTagsByChildIdPostWithHttpMessagesAsync(parentId, childId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiAnnotationTagsByParentIdChildTagsByChildIdDelete(this IHiPCMSAPI operations, int parentId, int childId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByParentIdChildTagsByChildIdDeleteAsync(parentId, childId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsByParentIdChildTagsByChildIdDeleteAsync(this IHiPCMSAPI operations, int parentId, int childId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsByParentIdChildTagsByChildIdDeleteWithHttpMessagesAsync(parentId, childId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<RelationResult> ApiAnnotationTagsRelationsGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsRelationsGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<RelationResult>> ApiAnnotationTagsRelationsGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsRelationsGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<RelationResult> ApiAnnotationTagsByTagIdRelationsGet(this IHiPCMSAPI operations, int tagId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByTagIdRelationsGetAsync(tagId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<RelationResult>> ApiAnnotationTagsByTagIdRelationsGetAsync(this IHiPCMSAPI operations, int tagId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsByTagIdRelationsGetWithHttpMessagesAsync(tagId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<TagResult> ApiAnnotationTagsByTagIdAllowedRelationRuleTargetsGet(this IHiPCMSAPI operations, int tagId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsByTagIdAllowedRelationRuleTargetsGetAsync(tagId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<TagResult>> ApiAnnotationTagsByTagIdAllowedRelationRuleTargetsGetAsync(this IHiPCMSAPI operations, int tagId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsByTagIdAllowedRelationRuleTargetsGetWithHttpMessagesAsync(tagId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagInstanceId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<RelationResult> ApiAnnotationTagsInstanceByIdAllowedRelationsGet(this IHiPCMSAPI operations, int tagInstanceId, string id, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsInstanceByIdAllowedRelationsGetAsync(tagInstanceId, id, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagInstanceId'>
        /// </param>
        /// <param name='id'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<RelationResult>> ApiAnnotationTagsInstanceByIdAllowedRelationsGetAsync(this IHiPCMSAPI operations, int tagInstanceId, string id, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiAnnotationTagsInstanceByIdAllowedRelationsGetWithHttpMessagesAsync(tagInstanceId, id, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='original'>
        /// </param>
        /// <param name='changed'>
        /// </param>
        public static void ApiAnnotationTagsRelationPut(this IHiPCMSAPI operations, string authorization, RelationFormModel original = default(RelationFormModel), RelationFormModel changed = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsRelationPutAsync(authorization, original, changed), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='original'>
        /// </param>
        /// <param name='changed'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsRelationPutAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel original = default(RelationFormModel), RelationFormModel changed = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsRelationPutWithHttpMessagesAsync(authorization, original, changed, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiAnnotationTagsRelationPost(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsRelationPostAsync(authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsRelationPostAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsRelationPostWithHttpMessagesAsync(authorization, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiAnnotationTagsRelationDelete(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsRelationDeleteAsync(authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsRelationDeleteAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsRelationDeleteWithHttpMessagesAsync(authorization, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='original'>
        /// </param>
        /// <param name='changed'>
        /// </param>
        public static void ApiAnnotationTagsRelationRulePut(this IHiPCMSAPI operations, string authorization, RelationFormModel original = default(RelationFormModel), RelationFormModel changed = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsRelationRulePutAsync(authorization, original, changed), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='original'>
        /// </param>
        /// <param name='changed'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsRelationRulePutAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel original = default(RelationFormModel), RelationFormModel changed = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsRelationRulePutWithHttpMessagesAsync(authorization, original, changed, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiAnnotationTagsRelationRulePost(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsRelationRulePostAsync(authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsRelationRulePostAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsRelationRulePostWithHttpMessagesAsync(authorization, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiAnnotationTagsRelationRuleDelete(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiAnnotationTagsRelationRuleDeleteAsync(authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiAnnotationTagsRelationRuleDeleteAsync(this IHiPCMSAPI operations, string authorization, RelationFormModel model = default(RelationFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiAnnotationTagsRelationRuleDeleteWithHttpMessagesAsync(authorization, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='downloadHash'>
        /// </param>
        public static VirtualFileResult DownloadByDownloadHashGet(this IHiPCMSAPI operations, string downloadHash)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).DownloadByDownloadHashGetAsync(downloadHash), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='downloadHash'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualFileResult> DownloadByDownloadHashGetAsync(this IHiPCMSAPI operations, string downloadHash, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DownloadByDownloadHashGetWithHttpMessagesAsync(downloadHash, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<NotificationResult> ApiNotificationsAllGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsAllGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<NotificationResult>> ApiNotificationsAllGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiNotificationsAllGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<NotificationResult> ApiNotificationsUnreadGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsUnreadGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<NotificationResult>> ApiNotificationsUnreadGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiNotificationsUnreadGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static int? ApiNotificationsCountGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsCountGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<int?> ApiNotificationsCountGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiNotificationsCountGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<string> ApiNotificationsSubscriptionsGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsSubscriptionsGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> ApiNotificationsSubscriptionsGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiNotificationsSubscriptionsGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<string> ApiNotificationsTypesGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsTypesGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> ApiNotificationsTypesGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiNotificationsTypesGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='notificationId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiNotificationsByNotificationIdMarkreadPost(this IHiPCMSAPI operations, int notificationId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsByNotificationIdMarkreadPostAsync(notificationId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='notificationId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiNotificationsByNotificationIdMarkreadPostAsync(this IHiPCMSAPI operations, int notificationId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiNotificationsByNotificationIdMarkreadPostWithHttpMessagesAsync(notificationId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='notificationType'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiNotificationsSubscribeByNotificationTypePut(this IHiPCMSAPI operations, string notificationType, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsSubscribeByNotificationTypePutAsync(notificationType, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='notificationType'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiNotificationsSubscribeByNotificationTypePutAsync(this IHiPCMSAPI operations, string notificationType, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiNotificationsSubscribeByNotificationTypePutWithHttpMessagesAsync(notificationType, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='notificationType'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiNotificationsUnsubscribeByNotificationTypePut(this IHiPCMSAPI operations, string notificationType, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiNotificationsUnsubscribeByNotificationTypePutAsync(notificationType, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='notificationType'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiNotificationsUnsubscribeByNotificationTypePutAsync(this IHiPCMSAPI operations, string notificationType, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiNotificationsUnsubscribeByNotificationTypePutWithHttpMessagesAsync(notificationType, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsAnnotationTagsAllPermissionIsAllowedToCreateGet(this IHiPCMSAPI operations, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsAnnotationTagsAllPermissionIsAllowedToCreateGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsAnnotationTagsAllPermissionIsAllowedToCreateGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsAnnotationTagsAllPermissionIsAllowedToCreateGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsAnnotationTagsAllPermissionIsAllowedToEditGet(this IHiPCMSAPI operations, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsAnnotationTagsAllPermissionIsAllowedToEditGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsAnnotationTagsAllPermissionIsAllowedToEditGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsAnnotationTagsAllPermissionIsAllowedToEditGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsTopicsAllPermissionIsAllowedToCreateGet(this IHiPCMSAPI operations, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsTopicsAllPermissionIsAllowedToCreateGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsTopicsAllPermissionIsAllowedToCreateGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsTopicsAllPermissionIsAllowedToCreateGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsTopicsByTopicIdPermissionIsAssociatedToGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsTopicsByTopicIdPermissionIsAssociatedToGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsTopicsByTopicIdPermissionIsAssociatedToGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsTopicsByTopicIdPermissionIsAssociatedToGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsTopicsByTopicIdPermissionIsAllowedToEditGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsTopicsByTopicIdPermissionIsAllowedToEditGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsTopicsByTopicIdPermissionIsAllowedToEditGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsTopicsByTopicIdPermissionIsAllowedToEditGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsTopicsByTopicIdPermissionIsReviewerGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsTopicsByTopicIdPermissionIsReviewerGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsTopicsByTopicIdPermissionIsReviewerGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsTopicsByTopicIdPermissionIsReviewerGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsUsersAllPermissionIsAllowedToAdministerGet(this IHiPCMSAPI operations, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsUsersAllPermissionIsAllowedToAdministerGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsUsersAllPermissionIsAllowedToAdministerGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsUsersAllPermissionIsAllowedToAdministerGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiPermissionsUsersAllPermissionIsAllowedToInviteGet(this IHiPCMSAPI operations, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiPermissionsUsersAllPermissionIsAllowedToInviteGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiPermissionsUsersAllPermissionIsAllowedToInviteGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiPermissionsUsersAllPermissionIsAllowedToInviteGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static TagFrequencyAnalyticsResult ApiTopicsByTopicIdAnalyticsTagFrequencyGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAnalyticsTagFrequencyGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagFrequencyAnalyticsResult> ApiTopicsByTopicIdAnalyticsTagFrequencyGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdAnalyticsTagFrequencyGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiTopicsByTopicIdSubTopicsGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdSubTopicsGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdSubTopicsGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdSubTopicsGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiTopicsByTopicIdParentTopicsGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdParentTopicsGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdParentTopicsGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdParentTopicsGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static EntityResult ApiTopicsByTopicIdParentTopicsByParentIdPut(this IHiPCMSAPI operations, int topicId, int parentId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdParentTopicsByParentIdPutAsync(topicId, parentId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EntityResult> ApiTopicsByTopicIdParentTopicsByParentIdPutAsync(this IHiPCMSAPI operations, int topicId, int parentId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdParentTopicsByParentIdPutWithHttpMessagesAsync(topicId, parentId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiTopicsByTopicIdParentTopicsByParentIdDelete(this IHiPCMSAPI operations, int topicId, int parentId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdParentTopicsByParentIdDeleteAsync(topicId, parentId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='parentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdParentTopicsByParentIdDeleteAsync(this IHiPCMSAPI operations, int topicId, int parentId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdParentTopicsByParentIdDeleteWithHttpMessagesAsync(topicId, parentId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static EntityResult ApiTopicsByTopicIdSubTopicsByChildIdPut(this IHiPCMSAPI operations, int topicId, int childId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdSubTopicsByChildIdPutAsync(topicId, childId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EntityResult> ApiTopicsByTopicIdSubTopicsByChildIdPutAsync(this IHiPCMSAPI operations, int topicId, int childId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdSubTopicsByChildIdPutWithHttpMessagesAsync(topicId, childId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiTopicsByTopicIdSubTopicsByChildIdDelete(this IHiPCMSAPI operations, int topicId, int childId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdSubTopicsByChildIdDeleteAsync(topicId, childId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='childId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdSubTopicsByChildIdDeleteAsync(this IHiPCMSAPI operations, int topicId, int childId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdSubTopicsByChildIdDeleteWithHttpMessagesAsync(topicId, childId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<TopicAttachmentResult> ApiTopicsByTopicIdAttachmentsGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAttachmentsGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<TopicAttachmentResult>> ApiTopicsByTopicIdAttachmentsGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdAttachmentsGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static EntityResult ApiTopicsByTopicIdAttachmentsPost(this IHiPCMSAPI operations, int topicId, string authorization, AttachmentFormModel model = default(AttachmentFormModel))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAttachmentsPostAsync(topicId, authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EntityResult> ApiTopicsByTopicIdAttachmentsPostAsync(this IHiPCMSAPI operations, int topicId, string authorization, AttachmentFormModel model = default(AttachmentFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdAttachmentsPostWithHttpMessagesAsync(topicId, authorization, model, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static StringWrapper ApiTopicsByTopicIdAttachmentsByAttachmentIdGet(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAttachmentsByAttachmentIdGetAsync(topicId, attachmentId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<StringWrapper> ApiTopicsByTopicIdAttachmentsByAttachmentIdGetAsync(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdAttachmentsByAttachmentIdGetWithHttpMessagesAsync(topicId, attachmentId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='contentType'>
        /// </param>
        /// <param name='contentDisposition'>
        /// </param>
        /// <param name='headers'>
        /// </param>
        /// <param name='length'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='fileName'>
        /// </param>
        public static EntityResult ApiTopicsByTopicIdAttachmentsByAttachmentIdPut(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, string contentType = default(string), string contentDisposition = default(string), object headers = default(object), long? length = default(long?), string name = default(string), string fileName = default(string))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAttachmentsByAttachmentIdPutAsync(topicId, attachmentId, authorization, contentType, contentDisposition, headers, length, name, fileName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='contentType'>
        /// </param>
        /// <param name='contentDisposition'>
        /// </param>
        /// <param name='headers'>
        /// </param>
        /// <param name='length'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='fileName'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EntityResult> ApiTopicsByTopicIdAttachmentsByAttachmentIdPutAsync(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, string contentType = default(string), string contentDisposition = default(string), object headers = default(object), long? length = default(long?), string name = default(string), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdAttachmentsByAttachmentIdPutWithHttpMessagesAsync(topicId, attachmentId, authorization, contentType, contentDisposition, headers, length, name, fileName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiTopicsByTopicIdAttachmentsByAttachmentIdDelete(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAttachmentsByAttachmentIdDeleteAsync(topicId, attachmentId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdAttachmentsByAttachmentIdDeleteAsync(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdAttachmentsByAttachmentIdDeleteWithHttpMessagesAsync(topicId, attachmentId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='status'>
        /// </param>
        /// <param name='deadline'>
        /// </param>
        /// <param name='onlyParents'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        public static PagedResultTopicResult ApiTopicsGet(this IHiPCMSAPI operations, string authorization, string query = default(string), string status = default(string), System.DateTime? deadline = default(System.DateTime?), bool? onlyParents = default(bool?), int? page = default(int?), int? pageSize = default(int?))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsGetAsync(authorization, query, status, deadline, onlyParents, page, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='status'>
        /// </param>
        /// <param name='deadline'>
        /// </param>
        /// <param name='onlyParents'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PagedResultTopicResult> ApiTopicsGetAsync(this IHiPCMSAPI operations, string authorization, string query = default(string), string status = default(string), System.DateTime? deadline = default(System.DateTime?), bool? onlyParents = default(bool?), int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsGetWithHttpMessagesAsync(authorization, query, status, deadline, onlyParents, page, pageSize, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static EntityResult ApiTopicsPost(this IHiPCMSAPI operations, string authorization, TopicFormModel model = default(TopicFormModel))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsPostAsync(authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<EntityResult> ApiTopicsPostAsync(this IHiPCMSAPI operations, string authorization, TopicFormModel model = default(TopicFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsPostWithHttpMessagesAsync(authorization, model, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='query'>
        /// </param>
        public static PagedResultTopicResult ApiTopicsOfUserGet(this IHiPCMSAPI operations, string authorization, string identity = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsOfUserGetAsync(authorization, identity, page, pageSize, query), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PagedResultTopicResult> ApiTopicsOfUserGetAsync(this IHiPCMSAPI operations, string authorization, string identity = default(string), int? page = default(int?), int? pageSize = default(int?), string query = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsOfUserGetWithHttpMessagesAsync(authorization, identity, page, pageSize, query, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static TopicResult ApiTopicsByTopicIdGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TopicResult> ApiTopicsByTopicIdGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiTopicsByTopicIdPut(this IHiPCMSAPI operations, int topicId, string authorization, TopicFormModel model = default(TopicFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdPutAsync(topicId, authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdPutAsync(this IHiPCMSAPI operations, int topicId, string authorization, TopicFormModel model = default(TopicFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdPutWithHttpMessagesAsync(topicId, authorization, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiTopicsByTopicIdDelete(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdDeleteAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdDeleteAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdDeleteWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='topicStatus'>
        /// </param>
        public static void ApiTopicsByTopicIdStatusPut(this IHiPCMSAPI operations, int topicId, string authorization, TopicStatus topicStatus = default(TopicStatus))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdStatusPutAsync(topicId, authorization, topicStatus), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='topicStatus'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdStatusPutAsync(this IHiPCMSAPI operations, int topicId, string authorization, TopicStatus topicStatus = default(TopicStatus), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdStatusPutWithHttpMessagesAsync(topicId, authorization, topicStatus, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static DocumentResult ApiTopicsByTopicIdDocumentGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdDocumentGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DocumentResult> ApiTopicsByTopicIdDocumentGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdDocumentGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='htmlContent'>
        /// </param>
        public static object ApiTopicsByTopicIdDocumentPost(this IHiPCMSAPI operations, int topicId, string authorization, HtmlContentModel htmlContent = default(HtmlContentModel))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdDocumentPostAsync(topicId, authorization, htmlContent), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='htmlContent'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> ApiTopicsByTopicIdDocumentPostAsync(this IHiPCMSAPI operations, int topicId, string authorization, HtmlContentModel htmlContent = default(HtmlContentModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdDocumentPostWithHttpMessagesAsync(topicId, authorization, htmlContent, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static void ApiTopicsByTopicIdDocumentDelete(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdDocumentDeleteAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdDocumentDeleteAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdDocumentDeleteWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='metadata'>
        /// </param>
        public static void ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPut(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, Metadata metadata = default(Metadata))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPutAsync(topicId, attachmentId, authorization, metadata), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='metadata'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPutAsync(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, Metadata metadata = default(Metadata), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPutWithHttpMessagesAsync(topicId, attachmentId, authorization, metadata, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='metadata'>
        /// </param>
        public static void ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPost(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, Metadata metadata = default(Metadata))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPostAsync(topicId, attachmentId, authorization, metadata), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='attachmentId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='metadata'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPostAsync(this IHiPCMSAPI operations, int topicId, int attachmentId, string authorization, Metadata metadata = default(Metadata), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdAttachmentsByAttachmentIdMetadataPostWithHttpMessagesAsync(topicId, attachmentId, authorization, metadata, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<TopicReviewResult> ApiTopicsByTopicIdReviewStatusGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdReviewStatusGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<TopicReviewResult>> ApiTopicsByTopicIdReviewStatusGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdReviewStatusGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='status'>
        /// </param>
        public static void ApiTopicsByTopicIdReviewStatusPut(this IHiPCMSAPI operations, int topicId, string authorization, TopicReviewStatus status = default(TopicReviewStatus))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdReviewStatusPutAsync(topicId, authorization, status), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='status'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdReviewStatusPutAsync(this IHiPCMSAPI operations, int topicId, string authorization, TopicReviewStatus status = default(TopicReviewStatus), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdReviewStatusPutWithHttpMessagesAsync(topicId, authorization, status, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<UserResult> ApiTopicsByTopicIdStudentsGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdStudentsGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<UserResult>> ApiTopicsByTopicIdStudentsGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdStudentsGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='users'>
        /// </param>
        public static void ApiTopicsByTopicIdStudentsPut(this IHiPCMSAPI operations, int topicId, string authorization, UsersFormModel users = default(UsersFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdStudentsPutAsync(topicId, authorization, users), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='users'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdStudentsPutAsync(this IHiPCMSAPI operations, int topicId, string authorization, UsersFormModel users = default(UsersFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdStudentsPutWithHttpMessagesAsync(topicId, authorization, users, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<UserResult> ApiTopicsByTopicIdSupervisorsGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdSupervisorsGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<UserResult>> ApiTopicsByTopicIdSupervisorsGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdSupervisorsGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='users'>
        /// </param>
        public static void ApiTopicsByTopicIdSupervisorsPut(this IHiPCMSAPI operations, int topicId, string authorization, UsersFormModel users = default(UsersFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdSupervisorsPutAsync(topicId, authorization, users), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='users'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdSupervisorsPutAsync(this IHiPCMSAPI operations, int topicId, string authorization, UsersFormModel users = default(UsersFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdSupervisorsPutWithHttpMessagesAsync(topicId, authorization, users, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<UserResult> ApiTopicsByTopicIdReviewersGet(this IHiPCMSAPI operations, int topicId, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdReviewersGetAsync(topicId, authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<UserResult>> ApiTopicsByTopicIdReviewersGetAsync(this IHiPCMSAPI operations, int topicId, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiTopicsByTopicIdReviewersGetWithHttpMessagesAsync(topicId, authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='users'>
        /// </param>
        public static void ApiTopicsByTopicIdReviewersPut(this IHiPCMSAPI operations, int topicId, string authorization, UsersFormModel users = default(UsersFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiTopicsByTopicIdReviewersPutAsync(topicId, authorization, users), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='topicId'>
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='users'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiTopicsByTopicIdReviewersPutAsync(this IHiPCMSAPI operations, int topicId, string authorization, UsersFormModel users = default(UsersFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiTopicsByTopicIdReviewersPutWithHttpMessagesAsync(topicId, authorization, users, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        public static UserResult ApiUserGet(this IHiPCMSAPI operations, string authorization, string identity = default(string))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUserGetAsync(authorization, identity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<UserResult> ApiUserGetAsync(this IHiPCMSAPI operations, string authorization, string identity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiUserGetWithHttpMessagesAsync(authorization, identity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='model'>
        /// </param>
        public static void ApiUserPut(this IHiPCMSAPI operations, string authorization, string identity = default(string), UserFormModel model = default(UserFormModel))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUserPutAsync(authorization, identity, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiUserPutAsync(this IHiPCMSAPI operations, string authorization, string identity = default(string), UserFormModel model = default(UserFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiUserPutWithHttpMessagesAsync(authorization, identity, model, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        public static Base64Image ApiUserPictureGet(this IHiPCMSAPI operations, string authorization, string identity = default(string))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUserPictureGetAsync(authorization, identity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Base64Image> ApiUserPictureGetAsync(this IHiPCMSAPI operations, string authorization, string identity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiUserPictureGetWithHttpMessagesAsync(authorization, identity, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='contentType'>
        /// </param>
        /// <param name='contentDisposition'>
        /// </param>
        /// <param name='headers'>
        /// </param>
        /// <param name='length'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='fileName'>
        /// </param>
        public static void ApiUserPicturePut(this IHiPCMSAPI operations, string authorization, string identity = default(string), string contentType = default(string), string contentDisposition = default(string), object headers = default(object), long? length = default(long?), string name = default(string), string fileName = default(string))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUserPicturePutAsync(authorization, identity, contentType, contentDisposition, headers, length, name, fileName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='contentType'>
        /// </param>
        /// <param name='contentDisposition'>
        /// </param>
        /// <param name='headers'>
        /// </param>
        /// <param name='length'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='fileName'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiUserPicturePutAsync(this IHiPCMSAPI operations, string authorization, string identity = default(string), string contentType = default(string), string contentDisposition = default(string), object headers = default(object), long? length = default(long?), string name = default(string), string fileName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiUserPicturePutWithHttpMessagesAsync(authorization, identity, contentType, contentDisposition, headers, length, name, fileName, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        public static void ApiUserPictureDelete(this IHiPCMSAPI operations, string authorization, string identity = default(string))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUserPictureDeleteAsync(authorization, identity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiUserPictureDeleteAsync(this IHiPCMSAPI operations, string authorization, string identity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiUserPictureDeleteWithHttpMessagesAsync(authorization, identity, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='identity'>
        /// </param>
        public static void ApiUserStudentPut(this IHiPCMSAPI operations, string authorization, StudentFormModel model = default(StudentFormModel), string identity = default(string))
        {
            System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUserStudentPutAsync(authorization, model, identity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='identity'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task ApiUserStudentPutAsync(this IHiPCMSAPI operations, string authorization, StudentFormModel model = default(StudentFormModel), string identity = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await operations.ApiUserStudentPutWithHttpMessagesAsync(authorization, model, identity, null, cancellationToken).ConfigureAwait(false);
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        public static System.Collections.Generic.IList<string> ApiUserDisciplinesGet(this IHiPCMSAPI operations, string authorization)
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUserDisciplinesGetAsync(authorization), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<string>> ApiUserDisciplinesGetAsync(this IHiPCMSAPI operations, string authorization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiUserDisciplinesGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        public static InvitationResult ApiUsersInvitePost(this IHiPCMSAPI operations, string authorization, InviteFormModel model = default(InviteFormModel))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUsersInvitePostAsync(authorization, model), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='model'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<InvitationResult> ApiUsersInvitePostAsync(this IHiPCMSAPI operations, string authorization, InviteFormModel model = default(InviteFormModel), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiUsersInvitePostWithHttpMessagesAsync(authorization, model, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='role'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        public static PagedResultUserResult ApiUsersGet(this IHiPCMSAPI operations, string authorization, string role = default(string), string query = default(string), int? page = default(int?), int? pageSize = default(int?))
        {
            return System.Threading.Tasks.Task.Factory.StartNew(s => ((IHiPCMSAPI)s).ApiUsersGetAsync(authorization, role, query, page, pageSize), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }

        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='authorization'>
        /// access token
        /// </param>
        /// <param name='role'>
        /// </param>
        /// <param name='query'>
        /// </param>
        /// <param name='page'>
        /// </param>
        /// <param name='pageSize'>
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PagedResultUserResult> ApiUsersGetAsync(this IHiPCMSAPI operations, string authorization, string role = default(string), string query = default(string), int? page = default(int?), int? pageSize = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ApiUsersGetWithHttpMessagesAsync(authorization, role, query, page, pageSize, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }

    }
}
